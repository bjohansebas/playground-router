---
import Layout from "../layouts/Layout.astro";
import Result from "../components/Result.astro";
import Form from "../components/Form.astro";
import Footer from "../components/Footer.astro";
---

<Layout>
  <main class="mx-auto h-screen max-w-5xl space-y-4 px-4 py-16">
    <h1 class="text-center text-3xl font-bold">Express Playground Router</h1>
    <Form />
    <Result />
    <Footer />
  </main>

  <script>
    window.addEventListener("load", async () => {
      const $version = document.querySelector("#version");
      const $regexpDisplay = document.querySelector("#regexp-display");
      const $route = document.querySelector("#route");
      const $path = document.querySelector("#path");
      const $keysDisplay = document.querySelector("#keys-display");
      const $pathDisplay = document.querySelector("#path-display");
      const $errorDisplay = document.querySelector("#error-display");
      const $errorMessage = document.querySelector("#error");
      const $strict = document.querySelector("#inputStrict");
      const $textStrict = document.querySelector("#labelStrict span");
      const $sensitive = document.querySelector("#inputSensitive");
      const $end = document.querySelector("#inputEnd");

      let error: string = "";
      let keys: object[] = [];
      let pathToRegexp: any;

      // @ts-ignore
      pathToRegexp = await import("path-to-regexp-0-1").then(
        (module: any) => module,
      );

      let version = "0.1.x";

      const versions = {
        // @ts-ignore
        "0.1.x": import("path-to-regexp-0-1"),
        "8.x": import("path-to-regexp-8"),
      };

      const updateRegex = (input: string) => {
        if ($regexpDisplay) {
          $regexpDisplay.textContent = input;
        }
      };

      const updatePathToRegex = (e: any) => {
        // @ts-ignore
        versions[typeof e === "string" ? e : e.target.value].then(
          (module: any) => {
            pathToRegexp = module;
            // @ts-ignore
            version = typeof e === "string" ? e : e.target.value;

            update();
          },
        );
      };

      if ($strict) {
        $strict.addEventListener("change", update);
      }

      if ($sensitive) {
        $sensitive.addEventListener("change", update);
      }

      if ($end) {
        $end.addEventListener("change", update);
      }

      if ($version) {
        // @ts-ignore
        updatePathToRegex($version.value);
        $version.addEventListener("change", updatePathToRegex);
      }

      if ($route) {
        $route.addEventListener("input", update);
      }

      if ($path) {
        $path.addEventListener("input", update);
      }

      function updatePath(regexp: RegExp) {
        if ($pathDisplay) {
          // @ts-ignore
          if (regexp.test($path.value)) {
            $pathDisplay.classList.add("sucess");
            $pathDisplay.classList.remove("not-found");
            $pathDisplay.textContent = "The path matches the route";
          } else {
            $pathDisplay.classList.add("not-found");
            $pathDisplay.classList.remove("sucess");
            $pathDisplay.textContent = "The path does not match the route";
          }
        }
      }

      function update() {
        error = "";
        keys = [];
        const opts = {
          // @ts-ignore
          sensitive: $sensitive.checked,
          // @ts-ignore
          end: $end.checked,
          // @ts-ignore
          strict: $strict.checked,
          // @ts-ignore
          trailing: $strict.checked,
        };

        // @ts-ignore
        const routeValue = $route?.value;
        if (version === "0.1.x") {
          // @ts-ignore
          $textStrict.textContent = "Strict";
        } else {
          // @ts-ignore

          $textStrict.textContent = "Trailing";
        }
        try {
          if (version === "0.1.x") {
            const result = pathToRegexp.default(routeValue, keys, opts);
            updateRegex(result);
            updatePath(result);
          } else {
            const regexpFn = pathToRegexp;

            const { keys: key, regexp } = regexpFn.pathToRegexp(
              routeValue,
              opts,
            );

            keys = key;

            updateRegex(regexp);
            updatePath(regexp);
          }
        } catch (e: any) {
          keys = [];
          error = e.message;
          if ($errorMessage) {
            $errorMessage.textContent = error;
          }
        }

        if (error) {
          $pathDisplay?.classList.add("fail");
          $errorDisplay?.classList.remove("fail");
          $regexpDisplay?.parentElement?.classList.add("fail");
        } else {
          $pathDisplay?.classList.remove("fail");
          $errorDisplay?.classList.add("fail");
          $regexpDisplay?.parentElement?.classList.remove("fail");
        }

        if ($keysDisplay) {
          // @ts-ignore
          $keysDisplay.innerHTML = `<ol>${keys.map((key, i) => `<li>${i + 1}. ${key.name}</li>`).join("")}</ol>`;
        }
      }
    });
  </script>
</Layout>
